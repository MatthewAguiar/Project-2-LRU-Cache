import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import java.util.HashMap;

/**
 * Code to test an <tt>LRUCache</tt> implementation.
 */
public class CacheTest 
{
	
	DataProvider<String, String> fileDataProvider = new VirtualDatabase<String, String>(new HashMap<String, String>(){{
		put("Documents/MyImages/vacation.jpg", "vacation.jpg");
		put("Videos/MyVideos/video.mp4", "video.mp4");
		put("Videos/Youtube/video.tutorial.mp4", "tutorial.mp4");
		put("Documents/Cpp/facebuk.cpp", "facebuk.cpp");
		put("Documents/Python/collatz.py", "collatz.py");
		put("Documents/Cpp/facebuk.cpp", "facebuk.cpp");
		put("Documents/MyImages/vacation.jpg", "vacation.jpeg");
	}});
	
	DataProvider<Integer, String> webCache = new VirtualDatabase(new HashMap<Integer, String>(){{
		put(0, "www.youtube.com");
		put(0, "www.google.com");
	}});
	
	Cache<Integer,String> cache = new LRUCache<Integer, String>(, 5);
	
	@Test
	public void testGetFileFromDataProvider()
	{
		/* This is a basic test that evaluates the following:
		 * 	- Does the data-provider's "get" method compile.
		 * 	- Can the "get" method actually get a valid value that is contained within its memory(HashMap). 
		 */
		assertEquals("collatz.py", fileDataProvider.get("Documents/Python/collatz.py"));
	}
	
	@Test
	public void testGetFileFromDataProvider2()
	{
		/* This test evaluates:
		 * 	- What happens if the user requests a piece of data that dosen't even exist within the provider.
		 */
		assertEquals(null, fileDataProvider.get("Documents/C/hello-world.c"));
	}
	
	@Test
	public void testGetFileFromDataProvider3()
	{
		/* This test evaluates:
		 * 	- What happens when there are duplicate key value pairs inserted to the data-provider.
		 */
		assertEquals("facebuk.cpp", fileDataProvider.get("Documents/Cpp/facebuk.cpp"));
		/* Explanation: If you attempt to "put" a particular key into a HashMap twice,
		 *              then the old value associated with the key will be replaced with the new one.
		 *              In this case, because the pair "Documents/Cpp/facebuk.cpp : facebuk.cpp" was "put" twice into the
		 *              HashMap, the value of "Documents/Cpp/facebuk.cpp", will be replaced with "facebuk.cpp" which is the
		 *              exact same as it was before.  
		 */
		
	}
	
	@Test
	public void testGetFileFromDataProvider4()
	{
		/* This test evaluates:
		 * 	- What happens when there is a duplicate key "put" into a HashMap with a different value.
		 */
		assertEquals("vacation.jpeg", fileDataProvider.get("Documents/MyImages/vacation.jpg"));
		/* Explanation: Here, the value of "Documents/MyImages/vacation.jpg" was originally "vacation.jpg",
		 * but was later replaced with "vacation.jpeg".
		 */
	}
	
	@Test
	public void leastRecentlyUsedIsCorrect() 
	{
		
	}
}
