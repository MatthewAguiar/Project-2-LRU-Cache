import java.util.HashMap;

public class LinkedHashMap<Type>
{
	private final HashMap<KeyType, Node<ValueType>> _data = new HashMap<KeyType, Node<ValueType>>();
	private final LinkedList<ValueType> _listOfValues = new LinkedList<ValueType>();
	private Node<Type> _head, _tail;
	private int numberOfElements;
	
	public LinkedHashMap()
	{
		_head = _tail = null;
		numberOfElements = 0;
	}
	
	public void add(Type data)
	{
		final Node<Type> nodeToAdd = new Node<Type>(data, null);
		
		if(_head == null)
		{
			_head = nodeToAdd;
			_tail = nodeToAdd;
		}
		else
		{
			_tail.setNext(nodeToAdd);
			_tail = nodeToAdd;
		}
		
		numberOfElements++;
	}
	
	public void add(Node<Type> nodeToAdd)
	{
		
		if(_head == null)
		{
			_head = nodeToAdd;
			_tail = nodeToAdd;
		}
		else
		{
			_tail.setNext(nodeToAdd);
			_tail = nodeToAdd;
		}
		
		numberOfElements++;
	}
	
	public void remove(Node<Type> nodeToRemove)
	{
		if(_head == nodeToRemove)
		{
			switch(numberOfElements)
			{
				case 1:
					_head = _tail = null;
					
				case 2:
					_head = _tail;
				
				default:
					_head = _head.getNext();
					
			}
		}
		else if(_tail == nodeToRemove)
		{
			switch(numberOfElements)
			{
					
				case 2:
					_head.setNext(null);
					_tail = _head;
				
				default:
					
					Node<Type> cursor = _head;
					for(int i = 0; i < numberOfElements - 1; i++)
					{							
						cursor = cursor.getNext();
					}	
					cursor.setNext(null);
					_tail = cursor;
			}
		}
		else
		{	
			Node<Type> cursorPrevious = _head;
			Node<Type> cursor = _head.getNext();
			Node<Type> cursorNext = _head.getNext().getNext();
			for(int i = 0; i < numberOfElements - 1; i++)
			{
				if(cursor == nodeToRemove)
				{
					cursor.setNext(null);
					cursorPrevious.setNext(cursorNext);
					break;
				}
				
				cursorPrevious = cursor;
				cursor = cursor.getNext();
				cursorNext = cursor.getNext();
			}					
		}
		numberOfElements--;
	}
	
	public Node<Type> getFirst()
	{
		return _head;
	}
	
	public Node<Type> getLast()
	{
		return _tail;
	}
}
